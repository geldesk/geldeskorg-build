extends ./lib/main/base.layout.jade
block content
  a(name='introduction')
  .jumbotron
    .container
      h1.text-center(style='margin: 0 auto; max-width: 900px'): small.
        A framework for creating #[strong native] cross-platform, 
        #[strong multi-process] desktop applications
  .container    
    p.text-center: em: strong Work has begun on the Swift/Cocoa UI...Mac OS X screenshot coming soon!
    .row: .col-xs-12: .panel.panel-default: .panel-body
      .col-xs-12.col-lg-4.text-center 
        h3 GelDesk turns this...
        img.img-responsive(
          src='lib/main/img/neon-json-375x425-opt.png' 
          style='margin-top: 30px; margin-left: auto; margin-right: auto;'
          width='375' height='425')
      .col-xs-12.col-lg-8.text-center 
        h3 into this...
        img.hidden-xs.hidden-sm.hidden-md(
          src='lib/main/img/round-arrow-r-blue-40x40-opt.jpg' 
          style='float: left; margin-right: 8px; margin-top: 170px;'
          width='40' height='40')
        img.img-responsive(
          src='lib/main/img/natwin-600x425-opt.png' 
          style='margin-left: auto; margin-right: auto;'
          width='600' height='425')
    p!= '&nbsp;'
    div(style='padding-left: 20px')
      h2 How it works
      p.
        #{t('site.description')}
    a(name='alpha')
    p!= '&nbsp;'
    p.text-center
      a.bn.btn-primary.btn-lg(href=t('url.github') 
        role='button')!= 'GitHub &raquo;'
      br
      br
      em: strong (Project is currently in the alpha stage.)
    p!= '&nbsp;'
  a(name='features')
  .jumbotron: .container
    h1 Features
    p
      | For now you can see where each feature is encoded in the JSON, before 
      | it is expanded and sent over IPC to the native UI process. 
      em (Better visual representation is forthcoming!)
    p!= '&nbsp;'
    .row
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title Declarative UI
          .panel-body
            img(src='lib/main/img/neon-json-230x180-opt.png' 
              width='230' height='180')
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title Abstract Components
          .panel-body
            img(src='lib/main/img/neon-json-230x180-opt.png' 
              width='230' height='180')
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title Data and Command Binding
          .panel-body
            img(src='lib/main/img/neon-json-230x180-opt.png' 
              width='230' height='180')
    .row
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title Simple Docking Layout
          .panel-body
            img(src='lib/main/img/neon-json-p2-230x180-opt.png' 
              width='230' height='180')
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title System Browser or WebKit
          .panel-body
            img(src='lib/main/img/neon-json-p2-230x180-opt.png' 
              width='230' height='180')
      .col-xs-12.col-md-4
        .panel.panel-primary
          .panel-heading: h3.panel-title High Performance Data Grid
          .panel-body
            img(src='lib/main/img/neon-json-p2-230x180-opt.png' 
              width='230' height='180')
    a(name='api')
    p!= '&nbsp;'
    h1 API
    p.
      Here is a sample of the API for Node.js. GelDesk runs the Node app, 
      which communicates back to GelDesk via a line-delimited JSON RPC system 
      that can work with any type of IPC, such as standard I/O, domain 
      sockets or named pipes.
    .row
      .col-xs-12.col-md-6
        pre
          | #[span.text-success app.js]
          | 
          | 
          code.hljs!= highlightJS(readFile('./sample/app.js'))
      .col-xs-12.col-md-6        
        pre
          | #[span.text-success views/main/window.js]
          | 
          | 
          code.hljs!= highlightJS(readFile('./sample/window.js'))
    p!= '&nbsp;'
    p.
      Take a look at the #[a(href=t('url.githubNode')) Node.js API] code 
      to see what else is going on. These files came from 
      #[a(href=t('url.githubNodeLabBasic')) lab/basic].
    p!= '&nbsp;'
    h2 Contribute to the project!
    p.
      We are looking for contributors who can help make this project great! 
      Please contribute in any way that you can.
    p.
      So far, there is an alpha Node.js client, an alpha C#/WinForms UI and 
      a good start on the alpha Swift/Cocoa UI. We need involvement on this
      before we go to beta so that we have a solid foundation to build on.
    p.
      A Go (golang) client and a Python client are on the roadmap among many 
      possible other languages. Some other important items on the roadmap are 
      a GTK UI and a WPF front-end for the Windows UI. WPF will definitely 
      happen, I can promise you that one!
    p.
      Before we start building on more platforms though, it would be nice to 
      have a well documented spec for the RPC system and the core components 
      and a really solid implementation on the initial platforms (Node, 
      WinForms, Cocoa).
    p!= '&nbsp;'
    p.text-center
      a.bn.btn-primary.btn-lg(href=t('url.github') 
        role='button')!= 'GitHub &raquo;'
    p!= '&nbsp;'
